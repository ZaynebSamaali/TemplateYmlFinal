variables:
  MAVEN_HOME: 'C:\\Users\\HP\\Downloads\\apache-maven-3.9.6'
 
# Define stages
stages:
  - build
  - test
  - sonarqube-check
  - deploy

# Define a template for Splunk logging
.envoi-splunk: &envoi-splunk
  after_script:
    - |
      if ($CI_JOB_STATUS -eq "failed") {
        $errorExceptionLogs = Get-Content $env:LOG_FILE_PATH | Select-String -Pattern "^\[ERROR\].*Exception:" | ForEach-Object { $_.Line }
        $errorFailedLogs = Get-Content $env:LOG_FILE_PATH | Select-String -Pattern "^\[ERROR\] Failed to execute goal" | ForEach-Object { $_.Line }
        $allErrorLogs = $errorFailedLogs + $errorExceptionLogs
        $message = $allErrorLogs -join "`n"

        $body = @{
          sourcetype = "_json"
          event = @{
            errorlogs = $message
            repository = $CI_PROJECT_NAME
            runner = $CI_RUNNER_ID
            branch = $CI_COMMIT_REF_NAME
            stage = "$CI_JOB_STAGE"
            status = "$CI_JOB_STATUS"
          }
        } | ConvertTo-Json -Compress
        $headers = @{
          "Authorization" = "Splunk $SPLUNK_HEC_TOKEN"
        }
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
        Invoke-RestMethod -Uri $SPLUNK_HEC_ENDPOINT -Method Post -Body $body -Headers $headers -ContentType 'application/json'
      }
      else {
        $body = @{
          sourcetype = "_json"
          event = @{
            repository = $CI_PROJECT_NAME
            branch = $CI_COMMIT_REF_NAME
            stage = "$CI_JOB_STAGE"
            status = "$CI_JOB_STATUS"
          }
        } | ConvertTo-Json -Compress
        $headers = @{
          "Authorization" = "Splunk $SPLUNK_HEC_TOKEN"
        }
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
        Invoke-RestMethod -Uri $SPLUNK_HEC_ENDPOINT -Method Post -Body $body -Headers $headers -ContentType 'application/json'
      }


      


  before_script:
    - echo "Checking Maven and Java"
    - $Env:PATH = "$Env:MAVEN_HOME\bin;" + $Env:PATH
    - echo $Env:PATH
    - mvn -v

.build_job:
  stage: build
  script:
    - |
      if ($CI_COMMIT_REF_NAME -match "^release/") {
       
        mvn -s $CI_PROJECT_DIR/ci-settings.xml clean package -DpackageScope=_${CI_PIPELINE_ID}_RELEASE -DskipTests | tee build.log
      }
      elseif ($CI_COMMIT_REF_NAME -eq "Develop" -or $env:CI_COMMIT_REF_NAME -eq "hotfox") {
        
        mvn -s $CI_PROJECT_DIR/ci-settings.xml clean package -DpackageScope=_${CI_PIPELINE_ID}_DRAFT -DskipTests | tee build.log
      }
      else {
        
        mvn -s $CI_PROJECT_DIR/ci-settings.xml clean package -DpackageScope=_${CI_PIPELINE_ID}_Build_Ordinaire -DskipTests | tee build.log
      }

    
    
  artifacts:
    paths:
      - build.log
  variables:
    LOG_FILE_PATH: "build.log"
  <<: *envoi-splunk

.test_job:
 
  stage: test
  script:
    - $OldJavaHome = $Env:JAVA_HOME
    - $OldPath = $Env:PATH
    - $Env:JAVA_HOME = "C:\openlogic-openjdk-8u402-b06-windows-64"
    - $Env:PATH = "$Env:JAVA_HOME\bin;" + $OldPath
    - echo "Using Java 8 for unit tests"
    - java -version
    - mvn -s $CI_PROJECT_DIR\ci-settings.xml clean test | tee test.log
    - $Env:JAVA_HOME = $OldJavaHome
    - $Env:PATH = $OldPath
    - java -version
  artifacts:
    paths:
      - test.log
  variables:
    LOG_FILE_PATH: "test.log"
  <<: *envoi-splunk

.sonarqube_job:

  stage: sonarqube-check
  script:
    - mvn -s $CI_PROJECT_DIR/ci-settings.xml sonar:sonar -DskipTests | tee sonar.log
  artifacts:
    paths:
      - sonar.log
  variables:
    LOG_FILE_PATH: "sonar.log"
  <<: *envoi-splunk

.deploy_develop:
 
  stage: deploy
  script:
    - mvn -s $CI_PROJECT_DIR/ci-settings.xml clean deploy -X -DmuleDeploy -Denv=Dev -DskipTests | tee deploy.log
  
  
  artifacts:
    paths:
      - deploy.log
  variables:
    LOG_FILE_PATH: "deploy.log"
  <<: *envoi-splunk
.deploy_Staging:
 
  stage: deploy
  script:
    - mvn -s $CI_PROJECT_DIR/ci-settings.xml clean deploy -X -DmuleDeploy -Denv=Staging -DskipTests | tee deploy.log
  

  artifacts:
    paths:
      - deploy.log
  variables:
    LOG_FILE_PATH: "deploy.log"
  <<: *envoi-splunk 

.deploy_Product:
 
  stage: deploy
  script:
    - mvn -s $CI_PROJECT_DIR/ci-settings.xml clean deploy -X -DmuleDeploy -Denv=Product -DskipTests | tee deploy.log
  
  artifacts:
    paths:
      - deploy.log
  variables:
    LOG_FILE_PATH: "deploy.log"
  <<: *envoi-splunk    

